//==============================================================================
//
// Title:       Lab4
// Purpose:     A short description of the application.
//
// Created on:  05.09.2008 at 17:32:18 by Gennady Kuzin.
// Copyright:   NSU. All Rights Reserved.
//
//==============================================================================

//==============================================================================
// Include files

#include <ansi_c.h>
#include <cvirte.h>     
#include <userint.h>
#include <tsani.h>
#include "Lab4.h"
#include "toolbox.h"
#include "i2c.h"
//==============================================================================
// Constants

//==============================================================================
// Types

//==============================================================================
// Static global variables

static int panelHandle;

char name[7] = {0};
int date = 0x01;
int flag = 0;
double temper[1000];
int idx = 0;
double X[1000];


void writeI2C(int address, int sub_address, int word)   
{
	sendStart(); 
	sendByte(address<<1); 
	getACK();    
	sendByte(sub_address); 
	getACK();
	sendByte(word); 		                        
	getACK();									   
	sendStop();
}


void readI2C(int address, int sub_address, int* word)      
{
	sendStart();
	sendByte((address<<1) | 0x00);
	getACK();
	sendByte(sub_address);
	getACK();
	sendStop();
	sendStart();
	sendByte((address<<1) | 0x01);
	getACK();
	readByte(word);
	NACK();
	sendStop();
}


void read_name(){
	int letter = 0;
	for(int i = 0; i < 7; i++){
		readI2C(0, i+8, &letter);
		name[i] = (char)letter;
		printf("%c", name[i]);
	}
}


double getTemp()
{
	int date1, date2;
	
	sendStart();
	sendByte((0x28 << 1) | 0x01);
	getACK();
	readByte(&date1);
	sendACK();
	readByte(&date2);
	sendACK();
	sendStop();

	short temp = (((date1)<<8) | date2) & 0xFFC0;
	
	return temp / 256.;
}



int main (int argc, char *argv[])
{
    int error = 0;
      ni6251Slot(2);
	//i2c_init();
    /* initialize and load resources */
    nullChk (InitCVIRTE (0, argv, 0));
    errChk (panelHandle = LoadPanel (0, "Lab4.uir", PANEL));
      initPorts();
	SetAxisScalingMode(panelHandle, PANEL_STRIPCHART, VAL_LEFT_YAXIS, VAL_AUTOSCALE, -10.00, 35.00);
	SetAxisScalingMode(panelHandle, PANEL_STRIPCHART, VAL_BOTTOM_XAXIS, VAL_MANUAL, 0, 10.00);
    /* display the panel and run the user interface */
    errChk (DisplayPanel (panelHandle));
    errChk (RunUserInterface ());

Error:
    /* clean up */
    DiscardPanel (panelHandle);
	ni6251Close();
    return 0;
}

//==============================================================================
// UI callback function prototypes

/// HIFN Exit when the user dismisses the panel.
int CVICALLBACK panelCB (int panel, int event, void *callbackData,
        int eventData1, int eventData2)
{
    if (event == EVENT_CLOSE)
        QuitUserInterface (0);
    return 0;
}

int CVICALLBACK timer_light (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2) {
	switch (event) {
		case EVENT_TIMER_TICK:
			if(flag){
				date=((date & 0x80) >> 7) | ((date << 1));
				writeI2C(0, 0x00, date);
			}
			break;
		case EVENT_DISCARD:

			break;
	}
	return 0;
}

int CVICALLBACK timerGraph (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2) {
	switch (event) {
		case EVENT_TIMER_TICK:
			PlotStripChartPoint(panelHandle, PANEL_STRIPCHART,  getTemp());
			break;
		case EVENT_DISCARD:

			break;
	}
	return 0;
}

int CVICALLBACK getTemper (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2) {
	switch (event) {
		case EVENT_COMMIT:
			SetCtrlVal(panelHandle, PANEL_NUMERIC, getTemp());
			break;
		case EVENT_LEFT_CLICK:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_GOT_FOCUS:

			break;
		case EVENT_DISCARD:

			break;
	}
	return 0;
}

int CVICALLBACK getname (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2) {
	switch (event) {
		case EVENT_COMMIT:
			read_name();
			SetCtrlVal(panelHandle,PANEL_STRING, name);
			break;
		case EVENT_LEFT_CLICK:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_GOT_FOCUS:

			break;
		case EVENT_DISCARD:

			break;
	}
	return 0;
}

int CVICALLBACK start_lights (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2) {
	switch (event) {
		case EVENT_COMMIT:
			flag = !flag;
			break;
		case EVENT_LEFT_CLICK:

			break;
		case EVENT_RIGHT_CLICK:

			break;
		case EVENT_GOT_FOCUS:

			break;
		case EVENT_DISCARD:

			break;
	}
	return 0;
}
